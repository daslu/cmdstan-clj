
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default0.js" type="text/javascript"></script><script src="index_files/md-default1.js" type="text/javascript"></script>

# cmdstan-clj


::: {.sourceClojure}
```clojure
(ns index
  (:require [tablecloth.api :as tc]
            [clojure.java.shell :as shell]
            [charred.api :as charred]
            [clojure.java.io :as io]
            [scicloj.kindly.v4.kind :as kind]))
```
:::



## Walkthrough

Here we reproduce [CmdStanR's intro](https://mc-stan.org/cmdstanr/articles/cmdstanr.html). Eventually, of course, most of the details below should be generalized and transparent.


::: {.sourceClojure}
```clojure
(def cmdstan-path (System/getenv "CMDSTAN_PATH"))
```
:::



::: {.sourceClojure}
```clojure
(def model-path
  (str (System/getProperty "user.dir")
       "/notebooks/bernoulli"))
```
:::



::: {.sourceClojure}
```clojure
(shell/sh "make" model-path
          :dir cmdstan-path)
```
:::



::: {.printedClojure}
```clojure
{:exit 0,
 :out
 "make: '/workspace/Dropbox/projects/scicloj/main-projects/cmdstan-clj/notebooks/bernoulli' is up to date.\n",
 :err ""}

```
:::



::: {.sourceClojure}
```clojure
(def data
  {:N 10
   :y [0 1 0 0 0 0 0 0 0 1]})
```
:::



::: {.sourceClojure}
```clojure
(def json-path "temp/bernoulli.data.json")
```
:::



::: {.sourceClojure}
```clojure
(io/make-parents json-path)
```
:::



::: {.printedClojure}
```clojure
false

```
:::



::: {.sourceClojure}
```clojure
(charred/write-json json-path data)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(def samples-path "temp/bernoulli.samples.csv")
```
:::



::: {.sourceClojure}
```clojure
(-> (shell/sh model-path "sample"
              "data" (str "file=" json-path)
              "output" (str "file=" samples-path))
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
method = sample (Default)
  sample
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
    save_warmup = 0 (Default)
    thin = 1 (Default)
    adapt
      engaged = 1 (Default)
      gamma = 0.05 (Default)
      delta = 0.8 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
      save_metric = 0 (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 0 (Default)
    num_chains = 1 (Default)
id = 1 (Default)
data
  file = temp/bernoulli.data.json
init = 2 (Default)
random
  seed = 312501541 (Default)
output
  file = temp/bernoulli.samples.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)
  sig_figs = -1 (Default)
  profile_file = profile.csv (Default)
  save_cmdstan_config = 0 (Default)
num_threads = 1 (Default)


Gradient evaluation took 5e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.002 seconds (Warm-up)
               0.009 seconds (Sampling)
               0.011 seconds (Total)


```
:::



::: {.sourceClojure}
```clojure
(-> samples-path
    tc/dataset)
```
:::


temp/bernoulli.samples.csv [1027 8]:

|                # stan_version_minor = 34 | column-1 | column-2 | column-3 | column-4 | column-5 | column-6 | column-7 |
|------------------------------------------|----------|----------|----------|----------|----------|----------|----------|
|                # model = bernoulli_model |          |          |          |          |          |          |          |
|              # method = sample (Default) |          |          |          |          |          |          |          |
|       #     num_samples = 1000 (Default) |          |          |          |          |          |          |          |
|          #     save_warmup = 0 (Default) |          |          |          |          |          |          |          |
|                              #     adapt |          |          |          |          |          |          |          |
|           #       gamma = 0.05 (Default) |          |          |          |          |          |          |          |
|           #       kappa = 0.75 (Default) |          |          |          |          |          |          |          |
|       #       init_buffer = 75 (Default) |          |          |          |          |          |          |          |
|            #       window = 25 (Default) |          |          |          |          |          |          |          |
|          #     algorithm = hmc (Default) |          |          |          |          |          |          |          |
|                                      ... |      ... |      ... |      ... |      ... |      ... |      ... |      ... |
|                                 -6.74897 | 0.970028 | 0.931578 |        2 |        3 |        0 |  6.96005 | 0.255474 |
|                                 -6.96519 | 0.969147 | 0.931578 |        2 |        3 |        0 |  6.97745 | 0.174214 |
|                                  -6.9901 | 0.998534 | 0.931578 |        2 |        3 |        0 |  7.02534 | 0.170404 |
|                                 -6.74971 | 0.993217 | 0.931578 |        1 |        3 |        0 |  7.05774 | 0.257311 |
|                                 -6.75411 | 0.999651 | 0.931578 |        2 |        3 |        0 |  6.75411 | 0.263958 |
|                                 -6.77078 | 0.926613 | 0.931578 |        2 |        3 |        0 |   7.2421 | 0.223982 |
|                                  -7.2365 | 0.937705 | 0.931578 |        2 |        3 |        0 |  7.31407 | 0.141779 |
|                                 -6.98479 |        1 | 0.931578 |        1 |        1 |        0 |  7.19701 | 0.171194 |
|                                 -7.03517 | 0.991312 | 0.931578 |        1 |        1 |        0 |  7.06697 | 0.164085 |
| #  Elapsed Time: 0.002 seconds (Warm-up) |          |          |          |          |          |          |          |
|   #                0.011 seconds (Total) |          |          |          |          |          |          |          |




```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/cmdstan-clj/blob/main/notebooks/index.clj">notebooks/index.clj</a></small></small></pre></div>
```
