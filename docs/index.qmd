
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default0.js" type="text/javascript"></script><script src="index_files/md-default1.js" type="text/javascript"></script>

# cmdstan-clj


::: {.sourceClojure}
```clojure
(ns index
  (:require [tablecloth.api :as tc]
            [clojure.java.shell :as shell]
            [charred.api :as charred]
            [clojure.java.io :as io]
            [tech.v3.dataset.print :as print]
            [clojure.string :as str]
            [scicloj.kindly.v4.kind :as kind]))
```
:::



## Walkthrough

Here we reproduce [CmdStanR's intro](https://mc-stan.org/cmdstanr/articles/cmdstanr.html). Eventually, of course, most of the details below should be generalized and transparent.


::: {.sourceClojure}
```clojure
(def cmdstan-path (System/getenv "CMDSTAN_PATH"))
```
:::



::: {.sourceClojure}
```clojure
(def model-path
  (str (System/getProperty "user.dir")
       "/notebooks/bernoulli"))
```
:::



::: {.sourceClojure}
```clojure
(shell/sh "make" model-path
          :dir cmdstan-path)
```
:::



::: {.printedClojure}
```clojure
{:exit 0,
 :out
 "make: '/workspace/Dropbox/projects/scicloj/main-projects/cmdstan-clj/notebooks/bernoulli' is up to date.\n",
 :err ""}

```
:::



::: {.sourceClojure}
```clojure
(def data
  {:N 10
   :y [0 1 0 0 0 0 0 0 0 1]})
```
:::



::: {.sourceClojure}
```clojure
(def json-path "temp/bernoulli.data.json")
```
:::



::: {.sourceClojure}
```clojure
(io/make-parents json-path)
```
:::



::: {.printedClojure}
```clojure
false

```
:::



::: {.sourceClojure}
```clojure
(charred/write-json json-path data)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(def samples-path "temp/bernoulli.samples.csv")
```
:::



::: {.sourceClojure}
```clojure
(-> (shell/sh model-path "sample"
              "data" (str "file=" json-path)
              "output" (str "file=" samples-path))
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
method = sample (Default)
  sample
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
    save_warmup = 0 (Default)
    thin = 1 (Default)
    adapt
      engaged = 1 (Default)
      gamma = 0.05 (Default)
      delta = 0.8 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
      save_metric = 0 (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 0 (Default)
    num_chains = 1 (Default)
id = 1 (Default)
data
  file = temp/bernoulli.data.json
init = 2 (Default)
random
  seed = 347021837 (Default)
output
  file = temp/bernoulli.samples.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)
  sig_figs = -1 (Default)
  profile_file = profile.csv (Default)
  save_cmdstan_config = 0 (Default)
num_threads = 1 (Default)


Gradient evaluation took 6e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.002 seconds (Warm-up)
               0.006 seconds (Sampling)
               0.008 seconds (Total)


```
:::



::: {.sourceClojure}
```clojure
(def processed-samples-path "temp/bernoulli.samples.processed.csv")
```
:::


Filter out comment lines.


::: {.sourceClojure}
```clojure
(with-open [reader (io/reader samples-path)
            writer (io/writer
                    processed-samples-path)]
  (loop [line (.readLine reader)]
    (when line
      (do (when-not
              (.startsWith line "#")
            (.write writer line)
            (.write writer "\n"))
          (recur (.readLine reader))))))
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(-> processed-samples-path
    tc/dataset
    (tc/set-dataset-name "model samples"))
```
:::


model samples [1000 8]:

|     lp__ | accept_stat__ | stepsize__ | treedepth__ | n_leapfrog__ | divergent__ | energy__ |     theta |
|---------:|--------------:|-----------:|------------:|-------------:|------------:|---------:|----------:|
| -8.35085 |      0.895713 |   0.981437 |           1 |            1 |           0 |  8.35619 | 0.0791679 |
| -7.55370 |      1.000000 |   0.981437 |           1 |            1 |           0 |  8.24741 | 0.1171890 |
| -7.25053 |      1.000000 |   0.981437 |           1 |            1 |           0 |  7.53817 | 0.1404770 |
| -7.10968 |      1.000000 |   0.981437 |           1 |            1 |           0 |  7.26934 | 0.1548940 |
| -7.36828 |      0.984465 |   0.981437 |           2 |            3 |           0 |  7.39301 | 0.1304520 |
| -7.02721 |      1.000000 |   0.981437 |           1 |            1 |           0 |  7.30936 | 0.1651530 |
| -7.02721 |      0.737296 |   0.981437 |           1 |            3 |           0 |  8.95970 | 0.1651530 |
| -6.96577 |      1.000000 |   0.981437 |           1 |            1 |           0 |  7.05044 | 0.1741220 |
| -7.79978 |      0.938588 |   0.981437 |           2 |            3 |           0 |  7.90278 | 0.4524330 |
| -8.03911 |      0.914943 |   0.981437 |           1 |            1 |           0 |  8.37788 | 0.4756070 |
|      ... |           ... |        ... |         ... |          ... |         ... |      ... |       ... |
| -8.18569 |      0.860997 |   0.981437 |           1 |            3 |           0 |  8.25262 | 0.0853588 |
| -8.18569 |      0.908823 |   0.981437 |           1 |            1 |           0 |  9.04813 | 0.0853588 |
| -6.98477 |      0.992594 |   0.981437 |           1 |            3 |           0 |  8.04992 | 0.1711970 |
| -7.27203 |      0.944476 |   0.981437 |           1 |            1 |           0 |  7.27889 | 0.1385310 |
| -9.62973 |      0.651520 |   0.981437 |           1 |            3 |           0 | 11.02130 | 0.5913280 |
| -7.70420 |      1.000000 |   0.981437 |           1 |            1 |           0 |  9.09206 | 0.4424600 |
| -6.79609 |      1.000000 |   0.981437 |           1 |            3 |           0 |  7.41275 | 0.2900240 |
| -6.97156 |      0.945741 |   0.981437 |           1 |            1 |           0 |  6.97303 | 0.3390580 |
| -8.37895 |      0.566733 |   0.981437 |           1 |            3 |           0 | 10.04090 | 0.0781774 |
| -8.66052 |      0.971625 |   0.981437 |           1 |            1 |           0 |  8.82721 | 0.0691151 |
| -8.47833 |      1.000000 |   0.981437 |           1 |            1 |           0 |  8.85035 | 0.0748063 |




```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/cmdstan-clj/blob/main/notebooks/index.clj">notebooks/index.clj</a></small></small></pre></div>
```
