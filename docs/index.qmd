
---
format:
  html: {toc: true, toc-depth: 4, theme: cosmo, output-file: index.html, title: cmdstan-clj}
code-block-background: true

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="index_files/md-default0.js" type="text/javascript"></script><script src="index_files/md-default1.js" type="text/javascript"></script><script src="index_files/plotly2.js" type="text/javascript"></script>
[cmdstan-clj](https://github.com/scicloj/cmdstan-clj) is a Clojure wrapper of the [Stan](https://mc-stan.org/) probabilistic programming language that uses the [CmdStan](https://mc-stan.org/users/interfaces/cmdstan) CLI.

**Source:** [![(GitHub repo)](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/scicloj/cmdstan-clj)

**Artifact:** [![(Clojars coordinates)](https://img.shields.io/clojars/v/org.scicloj/cmdstan-clj.svg)](https://clojars.org/org.scicloj/cmdstan-clj)

**Status:** an evolving proof-of-concept.



::: {.sourceClojure}
```clojure
(ns index
  (:require
   ;; cmdstan-clj API:
   [scicloj.cmdstan-clj.v1.api :as stan]
   ;; Tablecloth for table processing
   [tablecloth.api :as tc]
   ;; Tableplot for data visualization
   [scicloj.tableplot.v1.plotly :as plotly]
   ;; Kindly for specifying how to visualize things:
   [scicloj.kindly.v4.kind :as kind]))
```
:::



## Walkthrough

Here we follow [the introductory example](https://mc-stan.org/docs/cmdstan-guide/example_model_data.html) from Stan' documentation.

Let us define our model.

In our probabilistic model here,
we have we have an observed vector $y$
of $N$ samples.
We have an unobserved parameter $\theta \sim Beta(1,1)$,
and the elements of $y$ are conditionally independent
given $\theta$, and distributed $Bernoulli(\theta)$ each.


::: {.sourceClojure}
```clojure
(def model-code
  "
data {
      int<lower=0> N;
      array[N] int<lower=0,upper=1> y;
      }
parameters {
            real<lower=0,upper=1> theta;
            }
model {
       theta ~ beta(1,2);  // uniform prior on interval 0,1
       y ~ bernoulli(theta);
}")
```
:::


Now we may compile the model,
if this has not been done yet.


::: {.sourceClojure}
```clojure
(def model
  (stan/model model-code))
```
:::


Here is the output of compiling our model:


::: {.sourceClojure}
```clojure
(-> model
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
make: '/tmp/scicloj-files/session-dir-9036255698493098978/file-6729332977990631866' is up to date.
```
:::


Here are some toy data:


::: {.sourceClojure}
```clojure
(def data
  {:N 10
   :y [0 1 0 0 0 0 0 0 0 1]})
```
:::


Let us sample from the posterior of $\theta$
given out observed $y$ in the data.
(Soon we will support relevant options
to control the sampling process.)


::: {.sourceClojure}
```clojure
(def sampling
  (stan/sample model data {:num-chains 4
                           :num-warmup 200
                           :num-samples 100}))
```
:::


Here is the output of sampling process.


::: {.sourceClojure}
```clojure
(-> sampling
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
method = sample (Default)
  sample
    num_samples = 100
    num_warmup = 200
    save_warmup = false (Default)
    thin = 1 (Default)
    adapt
      engaged = true (Default)
      gamma = 0.05 (Default)
      delta = 0.8 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
      save_metric = false (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 0 (Default)
    num_chains = 4
id = 1 (Default)
data
  file = /tmp/scicloj-files/session-dir-9036255698493098978/file-1326435404593930035.json
init = 2 (Default)
random
  seed = 3957778942 (Default)
output
  file = /tmp/scicloj-files/session-dir-9036255698493098978/file-18377587113006538761.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)
  sig_figs = -1 (Default)
  profile_file = profile.csv (Default)
  save_cmdstan_config = false (Default)
num_threads = 1 (Default)


Gradient evaluation took 4e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.04 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 1e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.01 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 1e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.01 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 1e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.01 seconds.
Adjust your expectations accordingly!


Chain [1] Iteration:   1 / 300 [  0%]  (Warmup)
Chain [1] Iteration: 100 / 300 [ 33%]  (Warmup)
Chain [1] Iteration: 200 / 300 [ 66%]  (Warmup)
Chain [1] Iteration: 201 / 300 [ 67%]  (Sampling)
Chain [1] Iteration: 300 / 300 [100%]  (Sampling)

 Elapsed Time: 0 seconds (Warm-up)
               0.001 seconds (Sampling)
               0.001 seconds (Total)

Chain [2] Iteration:   1 / 300 [  0%]  (Warmup)
Chain [2] Iteration: 100 / 300 [ 33%]  (Warmup)
Chain [2] Iteration: 200 / 300 [ 66%]  (Warmup)
Chain [2] Iteration: 201 / 300 [ 67%]  (Sampling)
Chain [2] Iteration: 300 / 300 [100%]  (Sampling)

 Elapsed Time: 0.001 seconds (Warm-up)
               0.001 seconds (Sampling)
               0.002 seconds (Total)

Chain [3] Iteration:   1 / 300 [  0%]  (Warmup)
Chain [3] Iteration: 100 / 300 [ 33%]  (Warmup)
Chain [3] Iteration: 200 / 300 [ 66%]  (Warmup)
Chain [3] Iteration: 201 / 300 [ 67%]  (Sampling)
Chain [3] Iteration: 300 / 300 [100%]  (Sampling)

 Elapsed Time: 0.001 seconds (Warm-up)
               0.001 seconds (Sampling)
               0.002 seconds (Total)

Chain [4] Iteration:   1 / 300 [  0%]  (Warmup)
Chain [4] Iteration: 100 / 300 [ 33%]  (Warmup)
Chain [4] Iteration: 200 / 300 [ 66%]  (Warmup)
Chain [4] Iteration: 201 / 300 [ 67%]  (Sampling)
Chain [4] Iteration: 300 / 300 [100%]  (Sampling)

 Elapsed Time: 0.001 seconds (Warm-up)
               0.001 seconds (Sampling)
               0.002 seconds (Total)

```
:::


Here are the sampels:


::: {.sourceClojure}
```clojure
(-> sampling
    :samples)
```
:::


::: {.clay-dataset}
model samples [400 10]:

|    :lp__ | :accept_stat__ | :stepsize__ | :treedepth__ | :n_leapfrog__ | :divergent__ | :energy__ |    :theta |  :i | :chain |
|---------:|---------------:|------------:|-------------:|--------------:|-------------:|----------:|----------:|----:|-------:|
| -9.51599 |       0.805128 |     1.15844 |            1 |             3 |            0 |   9.69947 | 0.0496807 |   0 |      0 |
| -8.85840 |       1.000000 |     1.15844 |            2 |             3 |            0 |   9.52782 | 0.0653906 |   1 |      0 |
| -7.02438 |       1.000000 |     1.15844 |            2 |             3 |            0 |   8.50706 | 0.2239590 |   2 |      0 |
| -7.04063 |       0.997923 |     1.15844 |            2 |             3 |            0 |   7.04199 | 0.2534120 |   3 |      0 |
| -7.03067 |       1.000000 |     1.15844 |            1 |             1 |            0 |   7.03864 | 0.2457840 |   4 |      0 |
| -7.02315 |       1.000000 |     1.15844 |            1 |             3 |            0 |   7.02901 | 0.2344560 |   5 |      0 |
| -7.19824 |       0.847392 |     1.15844 |            2 |             3 |            0 |   7.99303 | 0.1667100 |   6 |      0 |
| -7.02269 |       0.913278 |     1.15844 |            2 |             3 |            0 |   7.86257 | 0.2297840 |   7 |      0 |
| -9.64694 |       0.459305 |     1.15844 |            2 |             7 |            0 |  11.37570 | 0.0471368 |   8 |      0 |
| -9.96135 |       0.980419 |     1.15844 |            1 |             1 |            0 |  10.16410 | 0.0416407 |   9 |      0 |
|      ... |            ... |         ... |          ... |           ... |          ... |       ... |       ... | ... |    ... |
| -7.39333 |       0.979176 |     0.76039 |            1 |             3 |            0 |  10.07890 | 0.1413660 |  89 |      3 |
| -7.03313 |       0.965367 |     0.76039 |            1 |             3 |            0 |   7.86278 | 0.2479700 |  90 |      3 |
| -7.02413 |       0.998220 |     0.76039 |            1 |             3 |            0 |   7.05091 | 0.2244690 |  91 |      3 |
| -7.13274 |       0.980484 |     0.76039 |            1 |             3 |            0 |   7.20265 | 0.1791500 |  92 |      3 |
| -7.09009 |       0.993959 |     0.76039 |            3 |             7 |            0 |   7.22993 | 0.2754480 |  93 |      3 |
| -7.09009 |       0.792667 |     0.76039 |            1 |             3 |            0 |   8.67380 | 0.2754480 |  94 |      3 |
| -7.11105 |       0.996362 |     0.76039 |            1 |             1 |            0 |   7.11682 | 0.2821960 |  95 |      3 |
| -7.18368 |       0.987158 |     0.76039 |            1 |             1 |            0 |   7.18537 | 0.3011620 |  96 |      3 |
| -7.22798 |       0.893079 |     0.76039 |            1 |             3 |            0 |   8.10309 | 0.1619810 |  97 |      3 |
| -7.22149 |       1.000000 |     0.76039 |            2 |             3 |            0 |   7.25067 | 0.1629750 |  98 |      3 |
| -7.08568 |       0.960621 |     0.76039 |            1 |             3 |            0 |   7.73196 | 0.2739090 |  99 |      3 |


:::


The histogram of $\theta$:


::: {.sourceClojure}
```clojure
(-> sampling
    :samples
    (tc/group-by [:chain] {:result-type :as-map})
    (update-vals
     (fn [chain-samples]
       (-> chain-samples
           (plotly/layer-histogram {:=x :theta
                                    :=histogram-nbins 100})))))
```
:::



```{=html}
<div><p>{</p><div class="clay-map" style="margin-left:10%;width:110%;"><table><tr><td valign="top"><div><pre><code class="sourceCode language-clojure printed-clojure">{:chain 0}
</code></pre></div></td><td><div style="margin-left:10px;"><div style="height:400px;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
              [{"mode":null,"type":"bar","name":"","r":null,"theta":null,"text":null,"x":[0.0311369535,0.0363242605,0.0415115675,0.0466988745,0.0518861815,0.057073488500000005,0.06226079550000001,0.06744810250000001,0.0726354095,0.0778227165,0.0830100235,0.0881973305,0.09338463749999999,0.0985719445,0.1037592515,0.1089465585,0.1141338655,0.1193211725,0.1245084795,0.12969578650000002,0.1348830935,0.1400704005,0.1452577075,0.1504450145,0.1556323215,0.16081962849999998,0.1660069355,0.17119424249999998,0.17638154949999998,0.1815688565,0.18675616349999996,0.1919434705,0.19713077750000002,0.2023180845,0.2075053915,0.2126926985,0.21788000549999997,0.2230673125,0.22825461949999998,0.2334419265,0.23862923349999998,0.24381654049999996,0.2490038475,0.2541911545,0.2593784615,0.2645657685,0.26975307550000005,0.27494038249999997,0.2801276895,0.2853149965,0.2905023035,0.2956896105,0.3008769175,0.30606422450000004,0.3112515315,0.3164388385,0.3216261455,0.32681345249999993,0.33200075949999996,0.3371880665,0.34237537349999997,0.34756268049999994,0.3527499875,0.3579372945,0.36312460150000003,0.3683119085,0.3734992155,0.3786865225,0.3838738295,0.38906113649999996,0.3942484435,0.39943575049999996,0.40462305749999994,0.40981036449999997,0.4149976715,0.42018497850000003,0.4253722855,0.4305595925,0.4357468995,0.44093420650000004,0.4461215135,0.4513088205,0.45649612749999996,0.46168343449999993,0.46687074149999996,0.4720580485,0.47724535549999997,0.4824326625,0.4876199695,0.4928072765,0.49799458350000003,0.5031818905000001,0.5083691975,0.5135565045,0.5187438115,0.5239311185,0.5291184255000001,0.5343057325,0.5394930394999999,0.5446803465000001],"y":[1,1,1,1,1,0,1,1,0,0,2,1,1,0,2,2,2,1,4,2,0,0,1,0,0,1,4,2,1,0,0,3,1,2,0,3,1,2,5,4,1,1,0,2,3,3,4,4,0,0,0,0,1,1,1,1,1,2,1,2,1,0,0,2,0,5,1,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1]}], {"width":500,"height":400,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"theta"},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count"},"title":null}, {});</script></div></div></td></tr></table><table><tr><td valign="top"><div><pre><code class="sourceCode language-clojure printed-clojure">{:chain 1}
</code></pre></div></td><td><div style="margin-left:10px;"><div style="height:400px;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
              [{"mode":null,"type":"bar","name":"","r":null,"theta":null,"text":null,"x":[0.053169975,0.059209925,0.065249875,0.071289825,0.07732977499999999,0.08336972499999999,0.089409675,0.095449625,0.101489575,0.10752952499999999,0.113569475,0.11960942499999999,0.125649375,0.13168932500000002,0.13772927499999998,0.143769225,0.14980917500000002,0.15584912499999998,0.161889075,0.167929025,0.17396897499999997,0.180008925,0.186048875,0.19208882499999996,0.19812877499999998,0.204168725,0.210208675,0.216248625,0.222288575,0.22832852499999998,0.23436847499999997,0.24040842499999998,0.246448375,0.252488325,0.258528275,0.264568225,0.27060817499999995,0.27664812499999997,0.282688075,0.288728025,0.29476797499999996,0.300807925,0.30684787499999994,0.31288782499999995,0.31892777499999997,0.324967725,0.331007675,0.33704762499999996,0.3430875749999999,0.34912752499999994,0.35516747499999995,0.36120742499999997,0.367247375,0.373287325,0.379327275,0.38536722500000004,0.391407175,0.39744712499999996,0.403487075,0.409527025,0.415566975,0.42160692499999997,0.4276468749999999,0.43368682499999994,0.43972677499999996,0.445766725,0.451806675,0.457846625,0.46388657499999997,0.46992652499999993,0.47596647499999994,0.48200642499999996,0.488046375,0.494086325,0.500126275,0.506166225,0.512206175,0.5182461249999999,0.524286075,0.5303260249999999,0.536365975,0.542405925,0.5484458749999999,0.554485825,0.5605257749999999,0.566565725,0.5726056749999999,0.578645625,0.584685575,0.5907255250000001,0.596765475,0.602805425,0.608845375,0.6148853249999999,0.620925275,0.626965225,0.6330051749999999,0.639045125,0.6450850749999999,0.651125025],"y":[1,1,0,0,0,2,0,1,1,1,3,0,2,0,1,3,1,1,3,0,2,4,1,2,0,6,0,2,2,3,7,3,0,3,2,0,2,2,2,1,1,3,2,1,1,2,4,1,1,0,0,0,1,2,0,1,0,3,0,2,1,1,0,2,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]}], {"width":500,"height":400,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"theta"},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count"},"title":null}, {});</script></div></div></td></tr></table><table><tr><td valign="top"><div><pre><code class="sourceCode language-clojure printed-clojure">{:chain 2}
</code></pre></div></td><td><div style="margin-left:10px;"><div style="height:400px;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
              [{"mode":null,"type":"bar","name":"","r":null,"theta":null,"text":null,"x":[0.0354929455,0.0399290365,0.044365127500000004,0.04880121850000001,0.0532373095,0.0576734005,0.0621094915,0.0665455825,0.0709816735,0.0754177645,0.0798538555,0.0842899465,0.08872603750000001,0.09316212850000001,0.0975982195,0.10203431049999999,0.10647040149999999,0.1109064925,0.1153425835,0.1197786745,0.1242147655,0.12865085650000002,0.1330869475,0.1375230385,0.1419591295,0.14639522049999998,0.1508313115,0.15526740249999998,0.1597034935,0.1641395845,0.16857567549999997,0.1730117665,0.17744785749999997,0.1818839485,0.18632003949999998,0.19075613049999995,0.19519222149999998,0.1996283125,0.2040644035,0.20850049450000002,0.2129365855,0.21737267649999997,0.2218087675,0.22624485849999998,0.2306809495,0.23511704049999999,0.2395531315,0.2439892225,0.2484253135,0.2528614045,0.25729749550000003,0.2617335865,0.2661696775,0.2706057685,0.27504185950000004,0.2794779505,0.2839140415,0.28835013249999997,0.29278622349999994,0.2972223145,0.3016584055,0.3060944965,0.31053058749999995,0.3149666785,0.3194027695,0.3238388605,0.32827495149999997,0.3327110425,0.3371471335,0.34158322449999995,0.3460193155,0.35045540649999996,0.35489149749999993,0.35932758849999996,0.3637636795,0.36819977049999997,0.3726358615,0.37707195250000003,0.3815080435,0.3859441345,0.3903802255,0.3948163165,0.39925240749999996,0.4036884985,0.40812458949999997,0.41256068049999994,0.4169967715,0.4214328625,0.4258689535,0.43030504449999996,0.4347411355,0.4391772265,0.4436133175,0.44804940849999997,0.45248549949999994,0.4569215904999999,0.46135768149999995,0.4657937725,0.47022986349999996,0.47466595449999993],"y":[1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,2,0,1,1,4,0,4,2,1,0,3,2,0,0,2,3,4,2,0,1,3,2,3,1,1,0,1,1,1,2,2,2,1,0,0,3,1,3,0,0,2,2,2,0,0,2,2,1,0,0,3,0,1,0,1,0,3,2,0,1,1,1,0,0,1,0,0,1,0,0,0,2,0,0,1,0,0,1,0,2,1]}], {"width":500,"height":400,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"theta"},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count"},"title":null}, {});</script></div></div></td></tr></table><table><tr><td valign="top"><div><pre><code class="sourceCode language-clojure printed-clojure">{:chain 3}
</code></pre></div></td><td><div style="margin-left:10px;"><div style="height:400px;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
              [{"mode":null,"type":"bar","name":"","r":null,"theta":null,"text":null,"x":[0.0520629185,0.0561261555,0.0601893925,0.0642526295,0.0683158665,0.0723791035,0.07644234050000001,0.08050557750000001,0.0845688145,0.0886320515,0.0926952885,0.0967585255,0.1008217625,0.10488499949999999,0.1089482365,0.1130114735,0.11707471050000001,0.12113794750000001,0.1252011845,0.1292644215,0.1333276585,0.1373908955,0.1414541325,0.1455173695,0.1495806065,0.1536438435,0.15770708049999999,0.1617703175,0.16583355449999998,0.16989679149999998,0.1739600285,0.1780232655,0.18208650250000002,0.18614973950000002,0.19021297650000002,0.1942762135,0.19833945050000001,0.2024026875,0.2064659245,0.2105291615,0.2145923985,0.2186556355,0.2227188725,0.2267821095,0.2308453465,0.23490858350000002,0.2389718205,0.24303505749999998,0.2470982945,0.2511615315,0.2552247685,0.2592880055,0.26335124249999997,0.2674144795,0.2714777165,0.2755409535,0.27960419049999996,0.28366742749999996,0.28773066449999996,0.29179390149999995,0.2958571385,0.2999203755,0.3039836125,0.3080468495,0.3121100865,0.31617332350000005,0.32023656050000004,0.32429979750000004,0.32836303450000004,0.3324262715,0.3364895085,0.3405527455,0.34461598250000003,0.3486792195,0.3527424565,0.3568056935,0.3608689305,0.3649321675,0.3689954045,0.3730586415,0.3771218785,0.3811851155,0.3852483525,0.3893115895,0.3933748265,0.3974380635,0.4015013005,0.4055645375,0.4096277745,0.41369101150000004,0.41775424850000004,0.42181748550000003,0.42588072250000003,0.4299439595,0.43400719649999997,0.43807043349999997,0.4421336705,0.4461969075,0.4502601445,0.4543233815],"y":[1,1,0,0,0,2,0,0,0,0,0,1,3,1,1,0,0,0,1,0,1,0,2,1,1,1,1,2,2,2,0,3,2,0,0,2,2,1,3,1,2,0,1,0,0,0,1,2,1,2,3,2,2,3,2,9,2,2,0,2,2,2,1,1,0,3,0,1,1,0,1,0,1,0,0,2,1,0,0,0,0,1,0,0,2,0,1,2,0,0,1,0,0,0,0,0,0,1,0,2]}], {"width":500,"height":400,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"theta"},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count"},"title":null}, {});</script></div></div></td></tr></table></div><p>}</p></div>
```


The trace plot of $\theta$:


::: {.sourceClojure}
```clojure
(-> sampling
    :samples
    (plotly/layer-line {:=x :i
                        :=y :theta
                        :=color :chain
                        :=color-type :nominal
                        :=mark-opacity 0.5}))
```
:::



```{=html}
<div style="height:400px;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
              [{"y":[0.0496807,0.0653906,0.223959,0.253412,0.245784,0.234456,0.16671,0.229784,0.0471368,0.0416407,0.0387739,0.0285433,0.0876113,0.251814,0.270927,0.233615,0.370567,0.343671,0.375051,0.547274,0.502232,0.395934,0.410571,0.274793,0.120108,0.172699,0.234252,0.218629,0.240276,0.203492,0.203492,0.124318,0.110302,0.21226,0.21226,0.192131,0.124297,0.0952981,0.114595,0.0848657,0.0602016,0.170635,0.22881,0.22881,0.327801,0.258489,0.168354,0.131997,0.131997,0.276317,0.263618,0.164089,0.276342,0.107898,0.102642,0.229796,0.267149,0.267149,0.367456,0.367456,0.447366,0.468107,0.324367,0.270866,0.452605,0.258722,0.272831,0.269455,0.304064,0.230361,0.441157,0.401779,0.367015,0.367379,0.224569,0.176932,0.359596,0.359596,0.314362,0.331123,0.19103,0.232991,0.0843039,0.298794,0.323573,0.339634,0.337276,0.195262,0.210398,0.166595,0.190118,0.112787,0.102032,0.147044,0.268479,0.122691,0.122691,0.258446,0.162065,0.310275],"r":null,"name":"0","mode":"lines","type":"scatter","theta":null,"line":{"color":"#1B9E77"},"opacity":0.5,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"text":null},{"y":[0.251705,0.27122,0.332662,0.233874,0.233874,0.241825,0.1596,0.22952,0.177405,0.435273,0.435273,0.325028,0.299898,0.307874,0.385176,0.421885,0.152129,0.103803,0.183223,0.308493,0.417073,0.216178,0.164796,0.397423,0.411607,0.411607,0.47456,0.371934,0.202938,0.282075,0.282075,0.276308,0.14258,0.172511,0.19178,0.252958,0.177541,0.227908,0.237365,0.201181,0.224929,0.255566,0.51803,0.366932,0.276126,0.333614,0.333614,0.215297,0.336503,0.300072,0.326214,0.451692,0.204849,0.224948,0.173377,0.181841,0.11266,0.112854,0.125635,0.238952,0.238952,0.234675,0.137409,0.255849,0.191934,0.395449,0.230004,0.140819,0.250304,0.144141,0.115647,0.182064,0.318768,0.303084,0.231653,0.163498,0.235769,0.232474,0.204364,0.123375,0.155767,0.2705,0.0977492,0.374147,0.289993,0.436766,0.343082,0.313374,0.206847,0.10761,0.0562211,0.0848672,0.0848672,0.05015,0.654145,0.531187,0.397569,0.331899,0.297771,0.201294],"r":null,"name":"1","mode":"lines","type":"scatter","theta":null,"line":{"color":"#D95F02"},"opacity":0.5,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"text":null},{"y":[0.227617,0.197069,0.295213,0.156704,0.135747,0.263487,0.146547,0.238621,0.151146,0.379977,0.28264,0.324934,0.318972,0.215926,0.215926,0.368984,0.374064,0.0332749,0.248096,0.248995,0.212566,0.275416,0.145283,0.241815,0.211533,0.185561,0.191297,0.251343,0.317395,0.284007,0.341457,0.341457,0.432684,0.468843,0.191772,0.305363,0.135834,0.258609,0.134815,0.121111,0.278388,0.300509,0.208665,0.16227,0.447822,0.385673,0.32765,0.38873,0.359051,0.187465,0.419141,0.476884,0.371379,0.296858,0.144179,0.129414,0.0629956,0.0880181,0.0839507,0.100925,0.18984,0.0709894,0.462904,0.434999,0.46916,0.0794202,0.144625,0.194478,0.237288,0.367251,0.209306,0.164212,0.13701,0.1654,0.1819,0.254348,0.274901,0.300794,0.369292,0.351195,0.215682,0.137444,0.208679,0.152,0.167637,0.219862,0.184995,0.40575,0.322943,0.275853,0.169824,0.284325,0.117885,0.256336,0.203264,0.339556,0.188549,0.0983872,0.305574,0.183985],"r":null,"name":"2","mode":"lines","type":"scatter","theta":null,"line":{"color":"#7570B3"},"opacity":0.5,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"text":null},{"y":[0.176701,0.141641,0.123768,0.215613,0.170234,0.260487,0.155164,0.314862,0.200421,0.213168,0.292582,0.296068,0.278372,0.294088,0.249522,0.194066,0.200132,0.324758,0.241249,0.101526,0.406246,0.283559,0.276891,0.249616,0.276009,0.269838,0.183019,0.204552,0.204967,0.102898,0.158802,0.0974429,0.0715748,0.401271,0.360785,0.393147,0.393979,0.108178,0.335636,0.261995,0.165832,0.303074,0.132883,0.181168,0.165542,0.17989,0.168072,0.265578,0.268275,0.211142,0.447118,0.455484,0.41643,0.240511,0.276283,0.266537,0.143493,0.0500313,0.314142,0.256387,0.272183,0.258122,0.101427,0.0998194,0.0713699,0.195991,0.275783,0.298958,0.30987,0.253577,0.317997,0.381323,0.263157,0.275821,0.343382,0.356522,0.404936,0.27822,0.277147,0.292708,0.196617,0.329664,0.357049,0.205171,0.257062,0.148806,0.244564,0.456355,0.0549286,0.141366,0.24797,0.224469,0.17915,0.275448,0.275448,0.282196,0.301162,0.161981,0.162975,0.273909],"r":null,"name":"3","mode":"lines","type":"scatter","theta":null,"line":{"color":"#E7298A"},"opacity":0.5,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"text":null}], {"width":500,"height":400,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"i"},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"theta"},"title":null}, {});</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/cmdstan-clj/blob/main/notebooks/index.clj">notebooks/index.clj</a></small></small></pre></div>
```
