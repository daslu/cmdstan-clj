
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default2.js" type="text/javascript"></script><script src="index_files/md-default3.js" type="text/javascript"></script><script src="index_files/vega4.js" type="text/javascript"></script><script src="index_files/vega5.js" type="text/javascript"></script><script src="index_files/vega6.js" type="text/javascript"></script>

# cmdstan-clj


::: {.sourceClojure}
```clojure
(ns index
  (:require [tablecloth.api :as tc]
            [clojure.java.shell :as shell]
            [charred.api :as charred]
            [clojure.java.io :as io]
            [tech.v3.dataset.print :as print]
            [clojure.string :as str]
            [scicloj.noj.v1.vis.hanami :as hanami]
            [aerial.hanami.templates :as ht]
            [scicloj.kindly.v4.kind :as kind]
            [scicloj.cmdstan-clj.v1.api :as stan]))
```
:::



## Walkthrough


::: {.sourceClojure}
```clojure
(def model
  (stan/model
   "
data {
      int<lower=0> N;
      array[N] int<lower=0,upper=1> y;
      }
parameters {
            real<lower=0,upper=1> theta;
            }
model {
       theta ~ beta(1,1);  // uniform prior on interval 0,1
       y ~ bernoulli(theta);
       }"))
```
:::



::: {.sourceClojure}
```clojure
(-> model
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure

--- Translating Stan model to C++ code ---
bin/stanc  --o=/tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.hpp /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.stan

--- Compiling C++ code ---
g++ -Wno-deprecated-declarations -std=c++1y -pthread -D_REENTRANT -Wno-sign-compare -Wno-ignored-attributes      -I stan/lib/stan_math/lib/tbb_2020.3/include    -O3 -I src -I stan/src -I stan/lib/rapidjson_1.1.0/ -I lib/CLI11-1.9.1/ -I stan/lib/stan_math/ -I stan/lib/stan_math/lib/eigen_3.4.0 -I stan/lib/stan_math/lib/boost_1.81.0 -I stan/lib/stan_math/lib/sundials_6.1.1/include -I stan/lib/stan_math/lib/sundials_6.1.1/src/sundials    -DBOOST_DISABLE_ASSERTS          -c -Wno-ignored-attributes   -x c++ -o /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.o /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.hpp

--- Linking model ---
g++ -Wno-deprecated-declarations -std=c++1y -pthread -D_REENTRANT -Wno-sign-compare -Wno-ignored-attributes      -I stan/lib/stan_math/lib/tbb_2020.3/include    -O3 -I src -I stan/src -I stan/lib/rapidjson_1.1.0/ -I lib/CLI11-1.9.1/ -I stan/lib/stan_math/ -I stan/lib/stan_math/lib/eigen_3.4.0 -I stan/lib/stan_math/lib/boost_1.81.0 -I stan/lib/stan_math/lib/sundials_6.1.1/include -I stan/lib/stan_math/lib/sundials_6.1.1/src/sundials    -DBOOST_DISABLE_ASSERTS               -Wl,-L,"/home/daslu/.cmdstan/cmdstan-2.34.1/stan/lib/stan_math/lib/tbb" -Wl,-rpath,"/home/daslu/.cmdstan/cmdstan-2.34.1/stan/lib/stan_math/lib/tbb"        /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.o src/cmdstan/main.o       -ltbb   stan/lib/stan_math/lib/sundials_6.1.1/lib/libsundials_nvecserial.a stan/lib/stan_math/lib/sundials_6.1.1/lib/libsundials_cvodes.a stan/lib/stan_math/lib/sundials_6.1.1/lib/libsundials_idas.a stan/lib/stan_math/lib/sundials_6.1.1/lib/libsundials_kinsol.a  stan/lib/stan_math/lib/tbb/libtbb.so.2 -o /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800
rm /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.hpp /tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800.o

```
:::



::: {.sourceClojure}
```clojure
(def data
  {:N 10
   :y [0 1 0 0 0 0 0 0 0 1]})
```
:::



::: {.sourceClojure}
```clojure
(def sampling
  (stan/sample model data))
```
:::



::: {.sourceClojure}
```clojure
(-> sampling
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
method = sample (Default)
  sample
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
    save_warmup = 0 (Default)
    thin = 1 (Default)
    adapt
      engaged = 1 (Default)
      gamma = 0.05 (Default)
      delta = 0.8 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
      save_metric = 0 (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 0 (Default)
    num_chains = 1 (Default)
id = 1 (Default)
data
  file = /tmp/scicloj-files/session-dir-11604659191568896558/file-14088774368984012072.json
init = 2 (Default)
random
  seed = 662862294 (Default)
output
  file = /tmp/scicloj-files/session-dir-11604659191568896558/file-5240347583271014355.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)
  sig_figs = -1 (Default)
  profile_file = profile.csv (Default)
  save_cmdstan_config = 0 (Default)
num_threads = 1 (Default)


Gradient evaluation took 4e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.04 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.002 seconds (Warm-up)
               0.006 seconds (Sampling)
               0.008 seconds (Total)


```
:::



::: {.sourceClojure}
```clojure
(-> sampling
    :samples)
```
:::


model samples [1000 9]:

|     :lp__ | :accept_stat__ | :stepsize__ | :treedepth__ | :n_leapfrog__ | :divergent__ | :energy__ |    :theta |  :i |
|----------:|---------------:|------------:|-------------:|--------------:|-------------:|----------:|----------:|----:|
|  -7.12544 |       1.000000 |    0.859805 |            2 |             7 |            0 |   7.20144 | 0.1531110 |   0 |
|  -6.76049 |       0.970390 |    0.859805 |            1 |             3 |            0 |   7.45602 | 0.2700770 |   1 |
|  -6.80729 |       0.994531 |    0.859805 |            2 |             7 |            0 |   6.81126 | 0.2086960 |   2 |
|  -6.75292 |       0.984932 |    0.859805 |            2 |             3 |            0 |   6.95163 | 0.2377610 |   3 |
|  -6.75191 |       0.998344 |    0.859805 |            1 |             3 |            0 |   6.76801 | 0.2611350 |   4 |
|  -6.75994 |       0.971193 |    0.859805 |            2 |             3 |            0 |   6.98571 | 0.2696260 |   5 |
|  -7.41472 |       0.815642 |    0.859805 |            1 |             3 |            0 |   8.13669 | 0.1268770 |   6 |
|  -7.46915 |       0.994143 |    0.859805 |            1 |             1 |            0 |   7.53916 | 0.1229150 |   7 |
| -10.83030 |       0.772239 |    0.859805 |            2 |             3 |            0 |  10.84110 | 0.0296003 |   8 |
| -11.70970 |       0.977921 |    0.859805 |            2 |             3 |            0 |  12.56390 | 0.0215387 |   9 |
|       ... |            ... |         ... |          ... |           ... |          ... |       ... |       ... | ... |
|  -6.99687 |       0.999978 |    0.859805 |            3 |             7 |            0 |   6.99700 | 0.1694110 | 989 |
|  -7.01396 |       0.997582 |    0.859805 |            2 |             7 |            0 |   7.02251 | 0.3475950 | 990 |
|  -7.11601 |       0.992393 |    0.859805 |            2 |             3 |            0 |   7.14978 | 0.3658820 | 991 |
|  -6.88775 |       1.000000 |    0.859805 |            1 |             1 |            0 |   7.06661 | 0.3196070 | 992 |
|  -6.76509 |       0.850704 |    0.859805 |            2 |             3 |            0 |   8.09324 | 0.2273950 | 993 |
|  -6.75753 |       0.988335 |    0.859805 |            2 |             3 |            0 |   6.86855 | 0.2330350 | 994 |
|  -6.79028 |       0.989506 |    0.859805 |            1 |             3 |            0 |   6.85700 | 0.2874560 | 995 |
|  -6.76836 |       1.000000 |    0.859805 |            1 |             1 |            0 |   6.78631 | 0.2757560 | 996 |
|  -6.76162 |       0.993124 |    0.859805 |            1 |             3 |            0 |   6.82491 | 0.2297700 | 997 |
|  -6.75534 |       0.996477 |    0.859805 |            1 |             3 |            0 |   6.79467 | 0.2653220 | 998 |
|  -6.86932 |       0.965500 |    0.859805 |            1 |             3 |            0 |   7.00964 | 0.1920450 | 999 |




::: {.sourceClojure}
```clojure
(-> sampling
    :samples
    (hanami/histogram :theta {:nbins 100}))
```
:::



```{=html}
<div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"count","type":"quantitative"},"x":{"scale":{"zero":false},"field":"left","type":"quantitative","title":"theta"},"y2":{"field":0,"type":"quantitative"},"x2":{"scale":{"zero":false},"field":"right","type":"quantitative"}},"mark":"rect","width":400,"background":"floralwhite","height":300,"data":{"url":"index_files\/0.csv","format":{"type":"csv"}}});</script></div>
```



::: {.sourceClojure}
```clojure
(-> sampling
    :samples
    (hanami/plot ht/line-chart {:X :i
                                :Y :theta}))
```
:::



```{=html}
<div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"theta","type":"quantitative"},"x":{"field":"i","type":"quantitative"}},"mark":{"type":"line","tooltip":true},"width":400,"background":"floralwhite","height":300,"data":{"url":"index_files\/1.csv","format":{"type":"csv"}}});</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/cmdstan-clj/blob/main/notebooks/index.clj">notebooks/index.clj</a></small></small></pre></div>
```
