
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default2.js" type="text/javascript"></script><script src="index_files/md-default3.js" type="text/javascript"></script><script src="index_files/vega4.js" type="text/javascript"></script><script src="index_files/vega5.js" type="text/javascript"></script><script src="index_files/vega6.js" type="text/javascript"></script>

# cmdstan-clj


::: {.sourceClojure}
```clojure
(ns index
  (:require [tablecloth.api :as tc]
            [clojure.java.shell :as shell]
            [charred.api :as charred]
            [clojure.java.io :as io]
            [tech.v3.dataset.print :as print]
            [clojure.string :as str]
            [scicloj.noj.v1.vis.hanami :as hanami]
            [aerial.hanami.templates :as ht]
            [scicloj.kindly.v4.kind :as kind]
            [scicloj.cmdstan-clj.v1.api :as stan]))
```
:::



## Walkthrough

Compile a prior model if this has not been done yet.

In our probabilistic model here,
we have we have an observed vector $y$
of $N$ samples.
We have an unobserved parameter $\theta \sim Beta(1,1)$,
and the elements of $y$ are conditionally independent
given $\theta$, and distributed $Bernoulli(\theta)$ each.


::: {.sourceClojure}
```clojure
(def model
  (stan/model
   "
data {
      int<lower=0> N;
      array[N] int<lower=0,upper=1> y;
      }
parameters {
            real<lower=0,upper=1> theta;
            }
model {
       theta ~ beta(1,1);  // uniform prior on interval 0,1
       y ~ bernoulli(theta);
       }"))
```
:::


Here is the output of compiling out model:


::: {.sourceClojure}
```clojure
(-> model
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
make: '/tmp/scicloj-files/session-dir-11604659191568896558/file-8576567770860138800' is up to date.

```
:::


Here are some toy data:


::: {.sourceClojure}
```clojure
(def data
  {:N 10
   :y [0 1 0 0 0 0 0 0 0 1]})
```
:::


Let us sample from the posterior of $\theta$
given out observed $y# in the data.
(Soon we will support relevant options
to control the sampling process.)


::: {.sourceClojure}
```clojure
(def sampling
  (stan/sample model data))
```
:::


Here is the output of sampling process.


::: {.sourceClojure}
```clojure
(-> sampling
    :out
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
method = sample (Default)
  sample
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
    save_warmup = 0 (Default)
    thin = 1 (Default)
    adapt
      engaged = 1 (Default)
      gamma = 0.05 (Default)
      delta = 0.8 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
      save_metric = 0 (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 0 (Default)
    num_chains = 1 (Default)
id = 1 (Default)
data
  file = /tmp/scicloj-files/session-dir-11604659191568896558/file-9342901033557427200.json
init = 2 (Default)
random
  seed = 664141335 (Default)
output
  file = /tmp/scicloj-files/session-dir-11604659191568896558/file-2474848715388464878.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)
  sig_figs = -1 (Default)
  profile_file = profile.csv (Default)
  save_cmdstan_config = 0 (Default)
num_threads = 1 (Default)


Gradient evaluation took 5e-06 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.002 seconds (Warm-up)
               0.005 seconds (Sampling)
               0.007 seconds (Total)


```
:::


Here are the sampels:


::: {.sourceClojure}
```clojure
(-> sampling
    :samples)
```
:::


model samples [1000 9]:

|    :lp__ | :accept_stat__ | :stepsize__ | :treedepth__ | :n_leapfrog__ | :divergent__ | :energy__ |    :theta |  :i |
|---------:|---------------:|------------:|-------------:|--------------:|-------------:|----------:|----------:|----:|
| -6.80212 |       1.000000 |    0.962205 |            1 |             3 |            0 |   8.38096 | 0.2925370 |   0 |
| -7.47170 |       0.849009 |    0.962205 |            1 |             3 |            0 |   7.47430 | 0.4159750 |   1 |
| -6.82065 |       1.000000 |    0.962205 |            1 |             3 |            0 |   7.25706 | 0.2995270 |   2 |
| -6.76882 |       0.968800 |    0.962205 |            2 |             3 |            0 |   6.97445 | 0.2760500 |   3 |
| -7.95253 |       0.797756 |    0.962205 |            2 |             3 |            0 |   7.99414 | 0.0953469 |   4 |
| -7.46592 |       1.000000 |    0.962205 |            1 |             1 |            0 |   7.91101 | 0.1231440 |   5 |
| -7.06524 |       1.000000 |    0.962205 |            1 |             1 |            0 |   7.39689 | 0.1602100 |   6 |
| -7.29910 |       0.985568 |    0.962205 |            2 |             3 |            0 |   7.32100 | 0.1361580 |   7 |
| -9.23919 |       0.891444 |    0.962205 |            2 |             3 |            0 |   9.48656 | 0.5672480 |   8 |
| -6.75825 |       1.000000 |    0.962205 |            1 |             3 |            0 |   8.77507 | 0.2324080 |   9 |
|      ... |            ... |         ... |          ... |           ... |          ... |       ... |       ... | ... |
| -7.03891 |       1.000000 |    0.962205 |            2 |             3 |            0 |   8.33433 | 0.1635890 | 989 |
| -6.92256 |       1.000000 |    0.962205 |            1 |             1 |            0 |   7.03166 | 0.1814050 | 990 |
| -8.81586 |       0.712960 |    0.962205 |            1 |             3 |            0 |   9.19633 | 0.0647031 | 991 |
| -7.09859 |       0.817178 |    0.962205 |            1 |             3 |            0 |  10.27320 | 0.3629420 | 992 |
| -7.53625 |       0.674640 |    0.962205 |            1 |             3 |            0 |   8.65947 | 0.1183310 | 993 |
| -6.75204 |       0.982534 |    0.962205 |            1 |             3 |            0 |   7.53879 | 0.2389140 | 994 |
| -6.74817 |       0.991699 |    0.962205 |            2 |             3 |            0 |   6.80041 | 0.2478810 | 995 |
| -9.00212 |       0.654036 |    0.962205 |            2 |             3 |            0 |   9.06338 | 0.0598762 | 996 |
| -9.21856 |       0.982747 |    0.962205 |            1 |             1 |            0 |   9.45728 | 0.0548190 | 997 |
| -8.03728 |       1.000000 |    0.962205 |            1 |             1 |            0 |   9.09410 | 0.0915267 | 998 |
| -6.91107 |       1.000000 |    0.962205 |            1 |             3 |            0 |   7.92088 | 0.1835200 | 999 |



The histogram of $\theta$:


::: {.sourceClojure}
```clojure
(-> sampling
    :samples
    (hanami/histogram :theta {:nbins 100}))
```
:::



```{=html}
<div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"count","type":"quantitative"},"x":{"scale":{"zero":false},"field":"left","type":"quantitative","title":"theta"},"y2":{"field":0,"type":"quantitative"},"x2":{"scale":{"zero":false},"field":"right","type":"quantitative"}},"mark":"rect","width":400,"background":"floralwhite","height":300,"data":{"url":"index_files\/0.csv","format":{"type":"csv"}}});</script></div>
```


The trace plot of $\theta$:


::: {.sourceClojure}
```clojure
(-> sampling
    :samples
    (hanami/plot ht/line-chart {:X :i
                                :Y :theta}))
```
:::



```{=html}
<div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"theta","type":"quantitative"},"x":{"field":"i","type":"quantitative"}},"mark":{"type":"line","tooltip":true},"width":400,"background":"floralwhite","height":300,"data":{"url":"index_files\/1.csv","format":{"type":"csv"}}});</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/cmdstan-clj/blob/main/notebooks/index.clj">notebooks/index.clj</a></small></small></pre></div>
```
